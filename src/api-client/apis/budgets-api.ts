/* tslint:disable */
/* eslint-disable */
/**
 * Financial Aide Backend
 * API Backend for Financial Aide open-source budgeting system
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, {
  AxiosResponse,
  AxiosInstance,
  AxiosRequestConfig,
} from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base';
import { BudgetCreationRequest } from '../models';
import { BudgetResponse } from '../models';
import { PaginatedBudgetResponseList } from '../models';
import { PatchedBudgetCreationRequest } from '../models';
/**
 * BudgetsApi - axios parameter creator
 * @export
 */
export const BudgetsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * List/create budgets
     * @param {BudgetCreationRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBudgetsBudgetsCreate: async (
      body: BudgetCreationRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling apiBudgetsBudgetsCreate.'
        );
      }
      const localVarPath = `/api/budgets/budgets`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication cookieAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('sessionid')
            : await configuration.apiKey;
        localVarQueryParameter['sessionid'] = localVarApiKeyValue;
      }

      // authentication tokenAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('Authorization')
            : await configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers?.['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieve, update, or delete a budget
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBudgetsBudgetsDestroy: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling apiBudgetsBudgetsDestroy.'
        );
      }
      const localVarPath = `/api/budgets/budgets/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication cookieAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('sessionid')
            : await configuration.apiKey;
        localVarQueryParameter['sessionid'] = localVarApiKeyValue;
      }

      // authentication tokenAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('Authorization')
            : await configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * List/create budgets
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBudgetsBudgetsList: async (
      page?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/budgets/budgets`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication cookieAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('sessionid')
            : await configuration.apiKey;
        localVarQueryParameter['sessionid'] = localVarApiKeyValue;
      }

      // authentication tokenAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('Authorization')
            : await configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieve, update, or delete a budget
     * @param {number} id
     * @param {PatchedBudgetCreationRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBudgetsBudgetsPartialUpdate: async (
      id: number,
      body?: PatchedBudgetCreationRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling apiBudgetsBudgetsPartialUpdate.'
        );
      }
      const localVarPath = `/api/budgets/budgets/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication cookieAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('sessionid')
            : await configuration.apiKey;
        localVarQueryParameter['sessionid'] = localVarApiKeyValue;
      }

      // authentication tokenAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('Authorization')
            : await configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers?.['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieve, update, or delete a budget
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBudgetsBudgetsRetrieve: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling apiBudgetsBudgetsRetrieve.'
        );
      }
      const localVarPath = `/api/budgets/budgets/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication cookieAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('sessionid')
            : await configuration.apiKey;
        localVarQueryParameter['sessionid'] = localVarApiKeyValue;
      }

      // authentication tokenAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('Authorization')
            : await configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Get a CSV file of planned and actual spending by category for this budget
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBudgetsBudgetsSpendingExportRetrieve: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling apiBudgetsBudgetsSpendingExportRetrieve.'
        );
      }
      const localVarPath = `/api/budgets/budgets/{id}/spending_export`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication cookieAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('sessionid')
            : await configuration.apiKey;
        localVarQueryParameter['sessionid'] = localVarApiKeyValue;
      }

      // authentication tokenAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('Authorization')
            : await configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieve, update, or delete a budget
     * @param {BudgetCreationRequest} body
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBudgetsBudgetsUpdate: async (
      body: BudgetCreationRequest,
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling apiBudgetsBudgetsUpdate.'
        );
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling apiBudgetsBudgetsUpdate.'
        );
      }
      const localVarPath = `/api/budgets/budgets/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication cookieAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('sessionid')
            : await configuration.apiKey;
        localVarQueryParameter['sessionid'] = localVarApiKeyValue;
      }

      // authentication tokenAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('Authorization')
            : await configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers?.['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * BudgetsApi - functional programming interface
 * @export
 */
export const BudgetsApiFp = function (configuration?: Configuration) {
  return {
    /**
     * List/create budgets
     * @param {BudgetCreationRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBudgetsBudgetsCreate(
      body: BudgetCreationRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<BudgetResponse>>
    > {
      const localVarAxiosArgs = await BudgetsApiAxiosParamCreator(
        configuration
      ).apiBudgetsBudgetsCreate(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Retrieve, update, or delete a budget
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBudgetsBudgetsDestroy(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
    > {
      const localVarAxiosArgs = await BudgetsApiAxiosParamCreator(
        configuration
      ).apiBudgetsBudgetsDestroy(id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * List/create budgets
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBudgetsBudgetsList(
      page?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<PaginatedBudgetResponseList>>
    > {
      const localVarAxiosArgs = await BudgetsApiAxiosParamCreator(
        configuration
      ).apiBudgetsBudgetsList(page, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Retrieve, update, or delete a budget
     * @param {number} id
     * @param {PatchedBudgetCreationRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBudgetsBudgetsPartialUpdate(
      id: number,
      body?: PatchedBudgetCreationRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<BudgetResponse>>
    > {
      const localVarAxiosArgs = await BudgetsApiAxiosParamCreator(
        configuration
      ).apiBudgetsBudgetsPartialUpdate(id, body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Retrieve, update, or delete a budget
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBudgetsBudgetsRetrieve(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<BudgetResponse>>
    > {
      const localVarAxiosArgs = await BudgetsApiAxiosParamCreator(
        configuration
      ).apiBudgetsBudgetsRetrieve(id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Get a CSV file of planned and actual spending by category for this budget
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBudgetsBudgetsSpendingExportRetrieve(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
    > {
      const localVarAxiosArgs = await BudgetsApiAxiosParamCreator(
        configuration
      ).apiBudgetsBudgetsSpendingExportRetrieve(id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Retrieve, update, or delete a budget
     * @param {BudgetCreationRequest} body
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBudgetsBudgetsUpdate(
      body: BudgetCreationRequest,
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<BudgetResponse>>
    > {
      const localVarAxiosArgs = await BudgetsApiAxiosParamCreator(
        configuration
      ).apiBudgetsBudgetsUpdate(body, id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * BudgetsApi - factory interface
 * @export
 */
export const BudgetsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     * List/create budgets
     * @param {BudgetCreationRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBudgetsBudgetsCreate(
      body: BudgetCreationRequest,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<BudgetResponse>> {
      return BudgetsApiFp(configuration)
        .apiBudgetsBudgetsCreate(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieve, update, or delete a budget
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBudgetsBudgetsDestroy(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<void>> {
      return BudgetsApiFp(configuration)
        .apiBudgetsBudgetsDestroy(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * List/create budgets
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBudgetsBudgetsList(
      page?: number,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<PaginatedBudgetResponseList>> {
      return BudgetsApiFp(configuration)
        .apiBudgetsBudgetsList(page, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieve, update, or delete a budget
     * @param {number} id
     * @param {PatchedBudgetCreationRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBudgetsBudgetsPartialUpdate(
      id: number,
      body?: PatchedBudgetCreationRequest,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<BudgetResponse>> {
      return BudgetsApiFp(configuration)
        .apiBudgetsBudgetsPartialUpdate(id, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieve, update, or delete a budget
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBudgetsBudgetsRetrieve(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<BudgetResponse>> {
      return BudgetsApiFp(configuration)
        .apiBudgetsBudgetsRetrieve(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get a CSV file of planned and actual spending by category for this budget
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBudgetsBudgetsSpendingExportRetrieve(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<void>> {
      return BudgetsApiFp(configuration)
        .apiBudgetsBudgetsSpendingExportRetrieve(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieve, update, or delete a budget
     * @param {BudgetCreationRequest} body
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBudgetsBudgetsUpdate(
      body: BudgetCreationRequest,
      id: number,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<BudgetResponse>> {
      return BudgetsApiFp(configuration)
        .apiBudgetsBudgetsUpdate(body, id, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * BudgetsApi - object-oriented interface
 * @export
 * @class BudgetsApi
 * @extends {BaseAPI}
 */
export class BudgetsApi extends BaseAPI {
  /**
   * List/create budgets
   * @param {BudgetCreationRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BudgetsApi
   */
  public async apiBudgetsBudgetsCreate(
    body: BudgetCreationRequest,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<BudgetResponse>> {
    return BudgetsApiFp(this.configuration)
      .apiBudgetsBudgetsCreate(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Retrieve, update, or delete a budget
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BudgetsApi
   */
  public async apiBudgetsBudgetsDestroy(
    id: number,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<void>> {
    return BudgetsApiFp(this.configuration)
      .apiBudgetsBudgetsDestroy(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * List/create budgets
   * @param {number} [page] A page number within the paginated result set.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BudgetsApi
   */
  public async apiBudgetsBudgetsList(
    page?: number,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<PaginatedBudgetResponseList>> {
    return BudgetsApiFp(this.configuration)
      .apiBudgetsBudgetsList(page, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Retrieve, update, or delete a budget
   * @param {number} id
   * @param {PatchedBudgetCreationRequest} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BudgetsApi
   */
  public async apiBudgetsBudgetsPartialUpdate(
    id: number,
    body?: PatchedBudgetCreationRequest,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<BudgetResponse>> {
    return BudgetsApiFp(this.configuration)
      .apiBudgetsBudgetsPartialUpdate(id, body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Retrieve, update, or delete a budget
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BudgetsApi
   */
  public async apiBudgetsBudgetsRetrieve(
    id: number,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<BudgetResponse>> {
    return BudgetsApiFp(this.configuration)
      .apiBudgetsBudgetsRetrieve(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Get a CSV file of planned and actual spending by category for this budget
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BudgetsApi
   */
  public async apiBudgetsBudgetsSpendingExportRetrieve(
    id: number,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<void>> {
    return BudgetsApiFp(this.configuration)
      .apiBudgetsBudgetsSpendingExportRetrieve(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Retrieve, update, or delete a budget
   * @param {BudgetCreationRequest} body
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BudgetsApi
   */
  public async apiBudgetsBudgetsUpdate(
    body: BudgetCreationRequest,
    id: number,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<BudgetResponse>> {
    return BudgetsApiFp(this.configuration)
      .apiBudgetsBudgetsUpdate(body, id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
