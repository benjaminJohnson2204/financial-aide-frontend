/* tslint:disable */
/* eslint-disable */
/**
 * Financial Aide Backend
 * API Backend for Financial Aide open-source budgeting system
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, {
  AxiosResponse,
  AxiosInstance,
  AxiosRequestConfig,
} from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base';
import { ExpenseCreationRequest } from '../models';
import { ExpenseResponse } from '../models';
import { PaginatedExpenseResponseList } from '../models';
import { PaginatedExpensesByCategoryList } from '../models';
import { PatchedExpenseCreationRequest } from '../models';
/**
 * ExpensesApi - axios parameter creator
 * @export
 */
export const ExpensesApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Get total actual spending for each budget category
     * @param {number} [category]
     * @param {Array<number>} [categoryIn] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {string} [search] A search term.
     * @param {Date} [timestamp]
     * @param {Date} [timestampGte]
     * @param {Date} [timestampLte]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiExpensesExpensesByCategoryList: async (
      category?: number,
      categoryIn?: Array<number>,
      ordering?: string,
      page?: number,
      search?: string,
      timestamp?: Date,
      timestampGte?: Date,
      timestampLte?: Date,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/expenses/expenses/by_category`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication cookieAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('sessionid')
            : await configuration.apiKey;
        localVarQueryParameter['sessionid'] = localVarApiKeyValue;
      }

      // authentication tokenAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('Authorization')
            : await configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      if (category !== undefined) {
        localVarQueryParameter['category'] = category;
      }

      if (categoryIn) {
        localVarQueryParameter['category__in'] = categoryIn.join(
          COLLECTION_FORMATS.csv
        );
      }

      if (ordering !== undefined) {
        localVarQueryParameter['ordering'] = ordering;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (search !== undefined) {
        localVarQueryParameter['search'] = search;
      }

      if (timestamp !== undefined) {
        localVarQueryParameter['timestamp'] =
          (timestamp as any) instanceof Date
            ? (timestamp as any).toISOString()
            : timestamp;
      }

      if (timestampGte !== undefined) {
        localVarQueryParameter['timestamp__gte'] =
          (timestampGte as any) instanceof Date
            ? (timestampGte as any).toISOString()
            : timestampGte;
      }

      if (timestampLte !== undefined) {
        localVarQueryParameter['timestamp__lte'] =
          (timestampLte as any) instanceof Date
            ? (timestampLte as any).toISOString()
            : timestampLte;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * List/create expenses
     * @param {ExpenseCreationRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiExpensesExpensesCreate: async (
      body: ExpenseCreationRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling apiExpensesExpensesCreate.'
        );
      }
      const localVarPath = `/api/expenses/expenses`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication cookieAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('sessionid')
            : await configuration.apiKey;
        localVarQueryParameter['sessionid'] = localVarApiKeyValue;
      }

      // authentication tokenAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('Authorization')
            : await configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers?.['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Get a CSV file with the user's expenses (can be filtered)
     * @param {number} [category]
     * @param {Array<number>} [categoryIn] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {string} [search] A search term.
     * @param {Date} [timestamp]
     * @param {Date} [timestampGte]
     * @param {Date} [timestampLte]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiExpensesExpensesCsvExportList: async (
      category?: number,
      categoryIn?: Array<number>,
      ordering?: string,
      page?: number,
      search?: string,
      timestamp?: Date,
      timestampGte?: Date,
      timestampLte?: Date,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/expenses/expenses/csv_export`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication cookieAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('sessionid')
            : await configuration.apiKey;
        localVarQueryParameter['sessionid'] = localVarApiKeyValue;
      }

      // authentication tokenAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('Authorization')
            : await configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      if (category !== undefined) {
        localVarQueryParameter['category'] = category;
      }

      if (categoryIn) {
        localVarQueryParameter['category__in'] = categoryIn.join(
          COLLECTION_FORMATS.csv
        );
      }

      if (ordering !== undefined) {
        localVarQueryParameter['ordering'] = ordering;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (search !== undefined) {
        localVarQueryParameter['search'] = search;
      }

      if (timestamp !== undefined) {
        localVarQueryParameter['timestamp'] =
          (timestamp as any) instanceof Date
            ? (timestamp as any).toISOString()
            : timestamp;
      }

      if (timestampGte !== undefined) {
        localVarQueryParameter['timestamp__gte'] =
          (timestampGte as any) instanceof Date
            ? (timestampGte as any).toISOString()
            : timestampGte;
      }

      if (timestampLte !== undefined) {
        localVarQueryParameter['timestamp__lte'] =
          (timestampLte as any) instanceof Date
            ? (timestampLte as any).toISOString()
            : timestampLte;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieve/update/delete expenses
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiExpensesExpensesDestroy: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling apiExpensesExpensesDestroy.'
        );
      }
      const localVarPath = `/api/expenses/expenses/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication cookieAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('sessionid')
            : await configuration.apiKey;
        localVarQueryParameter['sessionid'] = localVarApiKeyValue;
      }

      // authentication tokenAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('Authorization')
            : await configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * List/create expenses
     * @param {number} [category]
     * @param {Array<number>} [categoryIn] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {string} [search] A search term.
     * @param {Date} [timestamp]
     * @param {Date} [timestampGte]
     * @param {Date} [timestampLte]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiExpensesExpensesList: async (
      category?: number,
      categoryIn?: Array<number>,
      ordering?: string,
      page?: number,
      search?: string,
      timestamp?: Date,
      timestampGte?: Date,
      timestampLte?: Date,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/expenses/expenses`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication cookieAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('sessionid')
            : await configuration.apiKey;
        localVarQueryParameter['sessionid'] = localVarApiKeyValue;
      }

      // authentication tokenAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('Authorization')
            : await configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      if (category !== undefined) {
        localVarQueryParameter['category'] = category;
      }

      if (categoryIn) {
        localVarQueryParameter['category__in'] = categoryIn.join(
          COLLECTION_FORMATS.csv
        );
      }

      if (ordering !== undefined) {
        localVarQueryParameter['ordering'] = ordering;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (search !== undefined) {
        localVarQueryParameter['search'] = search;
      }

      if (timestamp !== undefined) {
        localVarQueryParameter['timestamp'] =
          (timestamp as any) instanceof Date
            ? (timestamp as any).toISOString()
            : timestamp;
      }

      if (timestampGte !== undefined) {
        localVarQueryParameter['timestamp__gte'] =
          (timestampGte as any) instanceof Date
            ? (timestampGte as any).toISOString()
            : timestampGte;
      }

      if (timestampLte !== undefined) {
        localVarQueryParameter['timestamp__lte'] =
          (timestampLte as any) instanceof Date
            ? (timestampLte as any).toISOString()
            : timestampLte;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieve/update/delete expenses
     * @param {number} id
     * @param {PatchedExpenseCreationRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiExpensesExpensesPartialUpdate: async (
      id: number,
      body?: PatchedExpenseCreationRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling apiExpensesExpensesPartialUpdate.'
        );
      }
      const localVarPath = `/api/expenses/expenses/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication cookieAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('sessionid')
            : await configuration.apiKey;
        localVarQueryParameter['sessionid'] = localVarApiKeyValue;
      }

      // authentication tokenAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('Authorization')
            : await configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers?.['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieve/update/delete expenses
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiExpensesExpensesRetrieve: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling apiExpensesExpensesRetrieve.'
        );
      }
      const localVarPath = `/api/expenses/expenses/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication cookieAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('sessionid')
            : await configuration.apiKey;
        localVarQueryParameter['sessionid'] = localVarApiKeyValue;
      }

      // authentication tokenAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('Authorization')
            : await configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieve/update/delete expenses
     * @param {ExpenseCreationRequest} body
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiExpensesExpensesUpdate: async (
      body: ExpenseCreationRequest,
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling apiExpensesExpensesUpdate.'
        );
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling apiExpensesExpensesUpdate.'
        );
      }
      const localVarPath = `/api/expenses/expenses/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication cookieAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('sessionid')
            : await configuration.apiKey;
        localVarQueryParameter['sessionid'] = localVarApiKeyValue;
      }

      // authentication tokenAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('Authorization')
            : await configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers?.['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ExpensesApi - functional programming interface
 * @export
 */
export const ExpensesApiFp = function (configuration?: Configuration) {
  return {
    /**
     * Get total actual spending for each budget category
     * @param {number} [category]
     * @param {Array<number>} [categoryIn] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {string} [search] A search term.
     * @param {Date} [timestamp]
     * @param {Date} [timestampGte]
     * @param {Date} [timestampLte]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiExpensesExpensesByCategoryList(
      category?: number,
      categoryIn?: Array<number>,
      ordering?: string,
      page?: number,
      search?: string,
      timestamp?: Date,
      timestampGte?: Date,
      timestampLte?: Date,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<PaginatedExpensesByCategoryList>>
    > {
      const localVarAxiosArgs = await ExpensesApiAxiosParamCreator(
        configuration
      ).apiExpensesExpensesByCategoryList(
        category,
        categoryIn,
        ordering,
        page,
        search,
        timestamp,
        timestampGte,
        timestampLte,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * List/create expenses
     * @param {ExpenseCreationRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiExpensesExpensesCreate(
      body: ExpenseCreationRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<ExpenseResponse>>
    > {
      const localVarAxiosArgs = await ExpensesApiAxiosParamCreator(
        configuration
      ).apiExpensesExpensesCreate(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Get a CSV file with the user's expenses (can be filtered)
     * @param {number} [category]
     * @param {Array<number>} [categoryIn] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {string} [search] A search term.
     * @param {Date} [timestamp]
     * @param {Date} [timestampGte]
     * @param {Date} [timestampLte]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiExpensesExpensesCsvExportList(
      category?: number,
      categoryIn?: Array<number>,
      ordering?: string,
      page?: number,
      search?: string,
      timestamp?: Date,
      timestampGte?: Date,
      timestampLte?: Date,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
    > {
      const localVarAxiosArgs = await ExpensesApiAxiosParamCreator(
        configuration
      ).apiExpensesExpensesCsvExportList(
        category,
        categoryIn,
        ordering,
        page,
        search,
        timestamp,
        timestampGte,
        timestampLte,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Retrieve/update/delete expenses
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiExpensesExpensesDestroy(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
    > {
      const localVarAxiosArgs = await ExpensesApiAxiosParamCreator(
        configuration
      ).apiExpensesExpensesDestroy(id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * List/create expenses
     * @param {number} [category]
     * @param {Array<number>} [categoryIn] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {string} [search] A search term.
     * @param {Date} [timestamp]
     * @param {Date} [timestampGte]
     * @param {Date} [timestampLte]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiExpensesExpensesList(
      category?: number,
      categoryIn?: Array<number>,
      ordering?: string,
      page?: number,
      search?: string,
      timestamp?: Date,
      timestampGte?: Date,
      timestampLte?: Date,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<PaginatedExpenseResponseList>>
    > {
      const localVarAxiosArgs = await ExpensesApiAxiosParamCreator(
        configuration
      ).apiExpensesExpensesList(
        category,
        categoryIn,
        ordering,
        page,
        search,
        timestamp,
        timestampGte,
        timestampLte,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Retrieve/update/delete expenses
     * @param {number} id
     * @param {PatchedExpenseCreationRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiExpensesExpensesPartialUpdate(
      id: number,
      body?: PatchedExpenseCreationRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<ExpenseResponse>>
    > {
      const localVarAxiosArgs = await ExpensesApiAxiosParamCreator(
        configuration
      ).apiExpensesExpensesPartialUpdate(id, body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Retrieve/update/delete expenses
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiExpensesExpensesRetrieve(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<ExpenseResponse>>
    > {
      const localVarAxiosArgs = await ExpensesApiAxiosParamCreator(
        configuration
      ).apiExpensesExpensesRetrieve(id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Retrieve/update/delete expenses
     * @param {ExpenseCreationRequest} body
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiExpensesExpensesUpdate(
      body: ExpenseCreationRequest,
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<ExpenseResponse>>
    > {
      const localVarAxiosArgs = await ExpensesApiAxiosParamCreator(
        configuration
      ).apiExpensesExpensesUpdate(body, id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * ExpensesApi - factory interface
 * @export
 */
export const ExpensesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     * Get total actual spending for each budget category
     * @param {number} [category]
     * @param {Array<number>} [categoryIn] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {string} [search] A search term.
     * @param {Date} [timestamp]
     * @param {Date} [timestampGte]
     * @param {Date} [timestampLte]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiExpensesExpensesByCategoryList(
      category?: number,
      categoryIn?: Array<number>,
      ordering?: string,
      page?: number,
      search?: string,
      timestamp?: Date,
      timestampGte?: Date,
      timestampLte?: Date,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<PaginatedExpensesByCategoryList>> {
      return ExpensesApiFp(configuration)
        .apiExpensesExpensesByCategoryList(
          category,
          categoryIn,
          ordering,
          page,
          search,
          timestamp,
          timestampGte,
          timestampLte,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * List/create expenses
     * @param {ExpenseCreationRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiExpensesExpensesCreate(
      body: ExpenseCreationRequest,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<ExpenseResponse>> {
      return ExpensesApiFp(configuration)
        .apiExpensesExpensesCreate(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get a CSV file with the user's expenses (can be filtered)
     * @param {number} [category]
     * @param {Array<number>} [categoryIn] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {string} [search] A search term.
     * @param {Date} [timestamp]
     * @param {Date} [timestampGte]
     * @param {Date} [timestampLte]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiExpensesExpensesCsvExportList(
      category?: number,
      categoryIn?: Array<number>,
      ordering?: string,
      page?: number,
      search?: string,
      timestamp?: Date,
      timestampGte?: Date,
      timestampLte?: Date,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<void>> {
      return ExpensesApiFp(configuration)
        .apiExpensesExpensesCsvExportList(
          category,
          categoryIn,
          ordering,
          page,
          search,
          timestamp,
          timestampGte,
          timestampLte,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieve/update/delete expenses
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiExpensesExpensesDestroy(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<void>> {
      return ExpensesApiFp(configuration)
        .apiExpensesExpensesDestroy(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * List/create expenses
     * @param {number} [category]
     * @param {Array<number>} [categoryIn] Multiple values may be separated by commas.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {string} [search] A search term.
     * @param {Date} [timestamp]
     * @param {Date} [timestampGte]
     * @param {Date} [timestampLte]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiExpensesExpensesList(
      category?: number,
      categoryIn?: Array<number>,
      ordering?: string,
      page?: number,
      search?: string,
      timestamp?: Date,
      timestampGte?: Date,
      timestampLte?: Date,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<PaginatedExpenseResponseList>> {
      return ExpensesApiFp(configuration)
        .apiExpensesExpensesList(
          category,
          categoryIn,
          ordering,
          page,
          search,
          timestamp,
          timestampGte,
          timestampLte,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieve/update/delete expenses
     * @param {number} id
     * @param {PatchedExpenseCreationRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiExpensesExpensesPartialUpdate(
      id: number,
      body?: PatchedExpenseCreationRequest,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<ExpenseResponse>> {
      return ExpensesApiFp(configuration)
        .apiExpensesExpensesPartialUpdate(id, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieve/update/delete expenses
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiExpensesExpensesRetrieve(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<ExpenseResponse>> {
      return ExpensesApiFp(configuration)
        .apiExpensesExpensesRetrieve(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieve/update/delete expenses
     * @param {ExpenseCreationRequest} body
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiExpensesExpensesUpdate(
      body: ExpenseCreationRequest,
      id: number,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<ExpenseResponse>> {
      return ExpensesApiFp(configuration)
        .apiExpensesExpensesUpdate(body, id, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ExpensesApi - object-oriented interface
 * @export
 * @class ExpensesApi
 * @extends {BaseAPI}
 */
export class ExpensesApi extends BaseAPI {
  /**
   * Get total actual spending for each budget category
   * @param {number} [category]
   * @param {Array<number>} [categoryIn] Multiple values may be separated by commas.
   * @param {string} [ordering] Which field to use when ordering the results.
   * @param {number} [page] A page number within the paginated result set.
   * @param {string} [search] A search term.
   * @param {Date} [timestamp]
   * @param {Date} [timestampGte]
   * @param {Date} [timestampLte]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExpensesApi
   */
  public async apiExpensesExpensesByCategoryList(
    category?: number,
    categoryIn?: Array<number>,
    ordering?: string,
    page?: number,
    search?: string,
    timestamp?: Date,
    timestampGte?: Date,
    timestampLte?: Date,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<PaginatedExpensesByCategoryList>> {
    return ExpensesApiFp(this.configuration)
      .apiExpensesExpensesByCategoryList(
        category,
        categoryIn,
        ordering,
        page,
        search,
        timestamp,
        timestampGte,
        timestampLte,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * List/create expenses
   * @param {ExpenseCreationRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExpensesApi
   */
  public async apiExpensesExpensesCreate(
    body: ExpenseCreationRequest,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<ExpenseResponse>> {
    return ExpensesApiFp(this.configuration)
      .apiExpensesExpensesCreate(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Get a CSV file with the user's expenses (can be filtered)
   * @param {number} [category]
   * @param {Array<number>} [categoryIn] Multiple values may be separated by commas.
   * @param {string} [ordering] Which field to use when ordering the results.
   * @param {number} [page] A page number within the paginated result set.
   * @param {string} [search] A search term.
   * @param {Date} [timestamp]
   * @param {Date} [timestampGte]
   * @param {Date} [timestampLte]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExpensesApi
   */
  public async apiExpensesExpensesCsvExportList(
    category?: number,
    categoryIn?: Array<number>,
    ordering?: string,
    page?: number,
    search?: string,
    timestamp?: Date,
    timestampGte?: Date,
    timestampLte?: Date,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<void>> {
    return ExpensesApiFp(this.configuration)
      .apiExpensesExpensesCsvExportList(
        category,
        categoryIn,
        ordering,
        page,
        search,
        timestamp,
        timestampGte,
        timestampLte,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Retrieve/update/delete expenses
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExpensesApi
   */
  public async apiExpensesExpensesDestroy(
    id: number,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<void>> {
    return ExpensesApiFp(this.configuration)
      .apiExpensesExpensesDestroy(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * List/create expenses
   * @param {number} [category]
   * @param {Array<number>} [categoryIn] Multiple values may be separated by commas.
   * @param {string} [ordering] Which field to use when ordering the results.
   * @param {number} [page] A page number within the paginated result set.
   * @param {string} [search] A search term.
   * @param {Date} [timestamp]
   * @param {Date} [timestampGte]
   * @param {Date} [timestampLte]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExpensesApi
   */
  public async apiExpensesExpensesList(
    category?: number,
    categoryIn?: Array<number>,
    ordering?: string,
    page?: number,
    search?: string,
    timestamp?: Date,
    timestampGte?: Date,
    timestampLte?: Date,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<PaginatedExpenseResponseList>> {
    return ExpensesApiFp(this.configuration)
      .apiExpensesExpensesList(
        category,
        categoryIn,
        ordering,
        page,
        search,
        timestamp,
        timestampGte,
        timestampLte,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Retrieve/update/delete expenses
   * @param {number} id
   * @param {PatchedExpenseCreationRequest} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExpensesApi
   */
  public async apiExpensesExpensesPartialUpdate(
    id: number,
    body?: PatchedExpenseCreationRequest,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<ExpenseResponse>> {
    return ExpensesApiFp(this.configuration)
      .apiExpensesExpensesPartialUpdate(id, body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Retrieve/update/delete expenses
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExpensesApi
   */
  public async apiExpensesExpensesRetrieve(
    id: number,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<ExpenseResponse>> {
    return ExpensesApiFp(this.configuration)
      .apiExpensesExpensesRetrieve(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Retrieve/update/delete expenses
   * @param {ExpenseCreationRequest} body
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExpensesApi
   */
  public async apiExpensesExpensesUpdate(
    body: ExpenseCreationRequest,
    id: number,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<ExpenseResponse>> {
    return ExpensesApiFp(this.configuration)
      .apiExpensesExpensesUpdate(body, id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
