/* tslint:disable */
/* eslint-disable */
/**
 * Financial Aide Backend
 * API Backend for Financial Aide open-source budgeting system
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, {
  AxiosResponse,
  AxiosInstance,
  AxiosRequestConfig,
} from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base';
import { BudgetCategoryRelationCreationRequest } from '../models';
import { BudgetCategoryRelationResponse } from '../models';
import { BudgetCategoryRelationsBulkUpdate } from '../models';
import { BudgetCategoryRelationsBulkUpdateRequest } from '../models';
import { PaginatedBudgetCategoryRelationResponseList } from '../models';
import { PatchedBudgetCategoryRelationCreationRequest } from '../models';
import { PatchedBudgetCategoryRelationsBulkUpdateRequest } from '../models';
/**
 * BudgetCategoryRelationsApi - axios parameter creator
 * @export
 */
export const BudgetCategoryRelationsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * List/create budget category relations
     * @param {BudgetCategoryRelationCreationRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBudgetsBudgetCategoryRelationsCreate: async (
      body: BudgetCategoryRelationCreationRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling apiBudgetsBudgetCategoryRelationsCreate.'
        );
      }
      const localVarPath = `/api/budgets/budget_category_relations`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication cookieAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('sessionid')
            : await configuration.apiKey;
        localVarQueryParameter['sessionid'] = localVarApiKeyValue;
      }

      // authentication tokenAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('Authorization')
            : await configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers?.['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieve, update, or delete a budget category relation
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBudgetsBudgetCategoryRelationsDestroy: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling apiBudgetsBudgetCategoryRelationsDestroy.'
        );
      }
      const localVarPath =
        `/api/budgets/budget_category_relations/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(id))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication cookieAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('sessionid')
            : await configuration.apiKey;
        localVarQueryParameter['sessionid'] = localVarApiKeyValue;
      }

      // authentication tokenAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('Authorization')
            : await configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * List/create budget category relations
     * @param {number} [budget]
     * @param {number} [category]
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBudgetsBudgetCategoryRelationsList: async (
      budget?: number,
      category?: number,
      page?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/budgets/budget_category_relations`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication cookieAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('sessionid')
            : await configuration.apiKey;
        localVarQueryParameter['sessionid'] = localVarApiKeyValue;
      }

      // authentication tokenAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('Authorization')
            : await configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      if (budget !== undefined) {
        localVarQueryParameter['budget'] = budget;
      }

      if (category !== undefined) {
        localVarQueryParameter['category'] = category;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieve, update, or delete a budget category relation
     * @param {number} id
     * @param {PatchedBudgetCategoryRelationCreationRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBudgetsBudgetCategoryRelationsPartialUpdate: async (
      id: number,
      body?: PatchedBudgetCategoryRelationCreationRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling apiBudgetsBudgetCategoryRelationsPartialUpdate.'
        );
      }
      const localVarPath =
        `/api/budgets/budget_category_relations/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(id))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication cookieAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('sessionid')
            : await configuration.apiKey;
        localVarQueryParameter['sessionid'] = localVarApiKeyValue;
      }

      // authentication tokenAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('Authorization')
            : await configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers?.['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieve, update, or delete a budget category relation
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBudgetsBudgetCategoryRelationsRetrieve: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling apiBudgetsBudgetCategoryRelationsRetrieve.'
        );
      }
      const localVarPath =
        `/api/budgets/budget_category_relations/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(id))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication cookieAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('sessionid')
            : await configuration.apiKey;
        localVarQueryParameter['sessionid'] = localVarApiKeyValue;
      }

      // authentication tokenAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('Authorization')
            : await configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieve, update, or delete a budget category relation
     * @param {BudgetCategoryRelationCreationRequest} body
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBudgetsBudgetCategoryRelationsUpdate: async (
      body: BudgetCategoryRelationCreationRequest,
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling apiBudgetsBudgetCategoryRelationsUpdate.'
        );
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling apiBudgetsBudgetCategoryRelationsUpdate.'
        );
      }
      const localVarPath =
        `/api/budgets/budget_category_relations/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(id))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication cookieAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('sessionid')
            : await configuration.apiKey;
        localVarQueryParameter['sessionid'] = localVarApiKeyValue;
      }

      // authentication tokenAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('Authorization')
            : await configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers?.['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Bulk update the category relations for this budget
     * @param {number} id
     * @param {PatchedBudgetCategoryRelationsBulkUpdateRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBudgetsBudgetsCategoryRelationsBulkUpdatePartialUpdate: async (
      id: number,
      body?: PatchedBudgetCategoryRelationsBulkUpdateRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling apiBudgetsBudgetsCategoryRelationsBulkUpdatePartialUpdate.'
        );
      }
      const localVarPath =
        `/api/budgets/budgets/{id}/category_relations/bulk_update`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(id))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication cookieAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('sessionid')
            : await configuration.apiKey;
        localVarQueryParameter['sessionid'] = localVarApiKeyValue;
      }

      // authentication tokenAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('Authorization')
            : await configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers?.['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Bulk update the category relations for this budget
     * @param {BudgetCategoryRelationsBulkUpdateRequest} body
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBudgetsBudgetsCategoryRelationsBulkUpdateUpdate: async (
      body: BudgetCategoryRelationsBulkUpdateRequest,
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling apiBudgetsBudgetsCategoryRelationsBulkUpdateUpdate.'
        );
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling apiBudgetsBudgetsCategoryRelationsBulkUpdateUpdate.'
        );
      }
      const localVarPath =
        `/api/budgets/budgets/{id}/category_relations/bulk_update`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(id))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication cookieAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('sessionid')
            : await configuration.apiKey;
        localVarQueryParameter['sessionid'] = localVarApiKeyValue;
      }

      // authentication tokenAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('Authorization')
            : await configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers?.['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * BudgetCategoryRelationsApi - functional programming interface
 * @export
 */
export const BudgetCategoryRelationsApiFp = function (
  configuration?: Configuration
) {
  return {
    /**
     * List/create budget category relations
     * @param {BudgetCategoryRelationCreationRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBudgetsBudgetCategoryRelationsCreate(
      body: BudgetCategoryRelationCreationRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<BudgetCategoryRelationResponse>>
    > {
      const localVarAxiosArgs =
        await BudgetCategoryRelationsApiAxiosParamCreator(
          configuration
        ).apiBudgetsBudgetCategoryRelationsCreate(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Retrieve, update, or delete a budget category relation
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBudgetsBudgetCategoryRelationsDestroy(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
    > {
      const localVarAxiosArgs =
        await BudgetCategoryRelationsApiAxiosParamCreator(
          configuration
        ).apiBudgetsBudgetCategoryRelationsDestroy(id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * List/create budget category relations
     * @param {number} [budget]
     * @param {number} [category]
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBudgetsBudgetCategoryRelationsList(
      budget?: number,
      category?: number,
      page?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<PaginatedBudgetCategoryRelationResponseList>>
    > {
      const localVarAxiosArgs =
        await BudgetCategoryRelationsApiAxiosParamCreator(
          configuration
        ).apiBudgetsBudgetCategoryRelationsList(
          budget,
          category,
          page,
          options
        );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Retrieve, update, or delete a budget category relation
     * @param {number} id
     * @param {PatchedBudgetCategoryRelationCreationRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBudgetsBudgetCategoryRelationsPartialUpdate(
      id: number,
      body?: PatchedBudgetCategoryRelationCreationRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<BudgetCategoryRelationResponse>>
    > {
      const localVarAxiosArgs =
        await BudgetCategoryRelationsApiAxiosParamCreator(
          configuration
        ).apiBudgetsBudgetCategoryRelationsPartialUpdate(id, body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Retrieve, update, or delete a budget category relation
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBudgetsBudgetCategoryRelationsRetrieve(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<BudgetCategoryRelationResponse>>
    > {
      const localVarAxiosArgs =
        await BudgetCategoryRelationsApiAxiosParamCreator(
          configuration
        ).apiBudgetsBudgetCategoryRelationsRetrieve(id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Retrieve, update, or delete a budget category relation
     * @param {BudgetCategoryRelationCreationRequest} body
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBudgetsBudgetCategoryRelationsUpdate(
      body: BudgetCategoryRelationCreationRequest,
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<BudgetCategoryRelationResponse>>
    > {
      const localVarAxiosArgs =
        await BudgetCategoryRelationsApiAxiosParamCreator(
          configuration
        ).apiBudgetsBudgetCategoryRelationsUpdate(body, id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Bulk update the category relations for this budget
     * @param {number} id
     * @param {PatchedBudgetCategoryRelationsBulkUpdateRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBudgetsBudgetsCategoryRelationsBulkUpdatePartialUpdate(
      id: number,
      body?: PatchedBudgetCategoryRelationsBulkUpdateRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<BudgetCategoryRelationsBulkUpdate>>
    > {
      const localVarAxiosArgs =
        await BudgetCategoryRelationsApiAxiosParamCreator(
          configuration
        ).apiBudgetsBudgetsCategoryRelationsBulkUpdatePartialUpdate(
          id,
          body,
          options
        );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Bulk update the category relations for this budget
     * @param {BudgetCategoryRelationsBulkUpdateRequest} body
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBudgetsBudgetsCategoryRelationsBulkUpdateUpdate(
      body: BudgetCategoryRelationsBulkUpdateRequest,
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<BudgetCategoryRelationsBulkUpdate>>
    > {
      const localVarAxiosArgs =
        await BudgetCategoryRelationsApiAxiosParamCreator(
          configuration
        ).apiBudgetsBudgetsCategoryRelationsBulkUpdateUpdate(body, id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * BudgetCategoryRelationsApi - factory interface
 * @export
 */
export const BudgetCategoryRelationsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     * List/create budget category relations
     * @param {BudgetCategoryRelationCreationRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBudgetsBudgetCategoryRelationsCreate(
      body: BudgetCategoryRelationCreationRequest,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<BudgetCategoryRelationResponse>> {
      return BudgetCategoryRelationsApiFp(configuration)
        .apiBudgetsBudgetCategoryRelationsCreate(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieve, update, or delete a budget category relation
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBudgetsBudgetCategoryRelationsDestroy(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<void>> {
      return BudgetCategoryRelationsApiFp(configuration)
        .apiBudgetsBudgetCategoryRelationsDestroy(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * List/create budget category relations
     * @param {number} [budget]
     * @param {number} [category]
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBudgetsBudgetCategoryRelationsList(
      budget?: number,
      category?: number,
      page?: number,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<PaginatedBudgetCategoryRelationResponseList>> {
      return BudgetCategoryRelationsApiFp(configuration)
        .apiBudgetsBudgetCategoryRelationsList(budget, category, page, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieve, update, or delete a budget category relation
     * @param {number} id
     * @param {PatchedBudgetCategoryRelationCreationRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBudgetsBudgetCategoryRelationsPartialUpdate(
      id: number,
      body?: PatchedBudgetCategoryRelationCreationRequest,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<BudgetCategoryRelationResponse>> {
      return BudgetCategoryRelationsApiFp(configuration)
        .apiBudgetsBudgetCategoryRelationsPartialUpdate(id, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieve, update, or delete a budget category relation
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBudgetsBudgetCategoryRelationsRetrieve(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<BudgetCategoryRelationResponse>> {
      return BudgetCategoryRelationsApiFp(configuration)
        .apiBudgetsBudgetCategoryRelationsRetrieve(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieve, update, or delete a budget category relation
     * @param {BudgetCategoryRelationCreationRequest} body
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBudgetsBudgetCategoryRelationsUpdate(
      body: BudgetCategoryRelationCreationRequest,
      id: number,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<BudgetCategoryRelationResponse>> {
      return BudgetCategoryRelationsApiFp(configuration)
        .apiBudgetsBudgetCategoryRelationsUpdate(body, id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Bulk update the category relations for this budget
     * @param {number} id
     * @param {PatchedBudgetCategoryRelationsBulkUpdateRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBudgetsBudgetsCategoryRelationsBulkUpdatePartialUpdate(
      id: number,
      body?: PatchedBudgetCategoryRelationsBulkUpdateRequest,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<BudgetCategoryRelationsBulkUpdate>> {
      return BudgetCategoryRelationsApiFp(configuration)
        .apiBudgetsBudgetsCategoryRelationsBulkUpdatePartialUpdate(
          id,
          body,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Bulk update the category relations for this budget
     * @param {BudgetCategoryRelationsBulkUpdateRequest} body
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBudgetsBudgetsCategoryRelationsBulkUpdateUpdate(
      body: BudgetCategoryRelationsBulkUpdateRequest,
      id: number,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<BudgetCategoryRelationsBulkUpdate>> {
      return BudgetCategoryRelationsApiFp(configuration)
        .apiBudgetsBudgetsCategoryRelationsBulkUpdateUpdate(body, id, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * BudgetCategoryRelationsApi - object-oriented interface
 * @export
 * @class BudgetCategoryRelationsApi
 * @extends {BaseAPI}
 */
export class BudgetCategoryRelationsApi extends BaseAPI {
  /**
   * List/create budget category relations
   * @param {BudgetCategoryRelationCreationRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BudgetCategoryRelationsApi
   */
  public async apiBudgetsBudgetCategoryRelationsCreate(
    body: BudgetCategoryRelationCreationRequest,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<BudgetCategoryRelationResponse>> {
    return BudgetCategoryRelationsApiFp(this.configuration)
      .apiBudgetsBudgetCategoryRelationsCreate(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Retrieve, update, or delete a budget category relation
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BudgetCategoryRelationsApi
   */
  public async apiBudgetsBudgetCategoryRelationsDestroy(
    id: number,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<void>> {
    return BudgetCategoryRelationsApiFp(this.configuration)
      .apiBudgetsBudgetCategoryRelationsDestroy(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * List/create budget category relations
   * @param {number} [budget]
   * @param {number} [category]
   * @param {number} [page] A page number within the paginated result set.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BudgetCategoryRelationsApi
   */
  public async apiBudgetsBudgetCategoryRelationsList(
    budget?: number,
    category?: number,
    page?: number,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<PaginatedBudgetCategoryRelationResponseList>> {
    return BudgetCategoryRelationsApiFp(this.configuration)
      .apiBudgetsBudgetCategoryRelationsList(budget, category, page, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Retrieve, update, or delete a budget category relation
   * @param {number} id
   * @param {PatchedBudgetCategoryRelationCreationRequest} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BudgetCategoryRelationsApi
   */
  public async apiBudgetsBudgetCategoryRelationsPartialUpdate(
    id: number,
    body?: PatchedBudgetCategoryRelationCreationRequest,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<BudgetCategoryRelationResponse>> {
    return BudgetCategoryRelationsApiFp(this.configuration)
      .apiBudgetsBudgetCategoryRelationsPartialUpdate(id, body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Retrieve, update, or delete a budget category relation
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BudgetCategoryRelationsApi
   */
  public async apiBudgetsBudgetCategoryRelationsRetrieve(
    id: number,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<BudgetCategoryRelationResponse>> {
    return BudgetCategoryRelationsApiFp(this.configuration)
      .apiBudgetsBudgetCategoryRelationsRetrieve(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Retrieve, update, or delete a budget category relation
   * @param {BudgetCategoryRelationCreationRequest} body
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BudgetCategoryRelationsApi
   */
  public async apiBudgetsBudgetCategoryRelationsUpdate(
    body: BudgetCategoryRelationCreationRequest,
    id: number,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<BudgetCategoryRelationResponse>> {
    return BudgetCategoryRelationsApiFp(this.configuration)
      .apiBudgetsBudgetCategoryRelationsUpdate(body, id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Bulk update the category relations for this budget
   * @param {number} id
   * @param {PatchedBudgetCategoryRelationsBulkUpdateRequest} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BudgetCategoryRelationsApi
   */
  public async apiBudgetsBudgetsCategoryRelationsBulkUpdatePartialUpdate(
    id: number,
    body?: PatchedBudgetCategoryRelationsBulkUpdateRequest,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<BudgetCategoryRelationsBulkUpdate>> {
    return BudgetCategoryRelationsApiFp(this.configuration)
      .apiBudgetsBudgetsCategoryRelationsBulkUpdatePartialUpdate(
        id,
        body,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Bulk update the category relations for this budget
   * @param {BudgetCategoryRelationsBulkUpdateRequest} body
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BudgetCategoryRelationsApi
   */
  public async apiBudgetsBudgetsCategoryRelationsBulkUpdateUpdate(
    body: BudgetCategoryRelationsBulkUpdateRequest,
    id: number,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<BudgetCategoryRelationsBulkUpdate>> {
    return BudgetCategoryRelationsApiFp(this.configuration)
      .apiBudgetsBudgetsCategoryRelationsBulkUpdateUpdate(body, id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
