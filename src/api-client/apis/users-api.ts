/* tslint:disable */
/* eslint-disable */
/**
 * Financial Aide Backend
 * API Backend for Financial Aide open-source budgeting system
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, {
  AxiosResponse,
  AxiosInstance,
  AxiosRequestConfig,
} from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base';
import { LoginRequestRequest } from '../models';
import { RegisterRequestRequest } from '../models';
import { UserResponse } from '../models';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Log in with username and password. Information about the user will be returned.
     * @param {LoginRequestRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUsersLoginCreate: async (
      body: LoginRequestRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling apiUsersLoginCreate.'
        );
      }
      const localVarPath = `/api/users/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication cookieAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('sessionid')
            : await configuration.apiKey;
        localVarQueryParameter['sessionid'] = localVarApiKeyValue;
      }

      // authentication tokenAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('Authorization')
            : await configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers?.['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Log out the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUsersLogoutCreate: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/users/logout`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication cookieAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('sessionid')
            : await configuration.apiKey;
        localVarQueryParameter['sessionid'] = localVarApiKeyValue;
      }

      // authentication tokenAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('Authorization')
            : await configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Register a new user. The new user will be logged in, and information about them returned.
     * @param {RegisterRequestRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUsersRegisterCreate: async (
      body: RegisterRequestRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling apiUsersRegisterCreate.'
        );
      }
      const localVarPath = `/api/users/register`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication cookieAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('sessionid')
            : await configuration.apiKey;
        localVarQueryParameter['sessionid'] = localVarApiKeyValue;
      }

      // authentication tokenAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('Authorization')
            : await configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers?.['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Get information about the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUsersWhoamiRetrieve: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/users/whoami`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication cookieAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('sessionid')
            : await configuration.apiKey;
        localVarQueryParameter['sessionid'] = localVarApiKeyValue;
      }

      // authentication tokenAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('Authorization')
            : await configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration?: Configuration) {
  return {
    /**
     * Log in with username and password. Information about the user will be returned.
     * @param {LoginRequestRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiUsersLoginCreate(
      body: LoginRequestRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<UserResponse>>
    > {
      const localVarAxiosArgs = await UsersApiAxiosParamCreator(
        configuration
      ).apiUsersLoginCreate(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Log out the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiUsersLogoutCreate(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
    > {
      const localVarAxiosArgs = await UsersApiAxiosParamCreator(
        configuration
      ).apiUsersLogoutCreate(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Register a new user. The new user will be logged in, and information about them returned.
     * @param {RegisterRequestRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiUsersRegisterCreate(
      body: RegisterRequestRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<UserResponse>>
    > {
      const localVarAxiosArgs = await UsersApiAxiosParamCreator(
        configuration
      ).apiUsersRegisterCreate(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Get information about the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiUsersWhoamiRetrieve(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<UserResponse>>
    > {
      const localVarAxiosArgs = await UsersApiAxiosParamCreator(
        configuration
      ).apiUsersWhoamiRetrieve(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     * Log in with username and password. Information about the user will be returned.
     * @param {LoginRequestRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiUsersLoginCreate(
      body: LoginRequestRequest,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<UserResponse>> {
      return UsersApiFp(configuration)
        .apiUsersLoginCreate(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Log out the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiUsersLogoutCreate(
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<void>> {
      return UsersApiFp(configuration)
        .apiUsersLogoutCreate(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Register a new user. The new user will be logged in, and information about them returned.
     * @param {RegisterRequestRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiUsersRegisterCreate(
      body: RegisterRequestRequest,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<UserResponse>> {
      return UsersApiFp(configuration)
        .apiUsersRegisterCreate(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get information about the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiUsersWhoamiRetrieve(
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<UserResponse>> {
      return UsersApiFp(configuration)
        .apiUsersWhoamiRetrieve(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
  /**
   * Log in with username and password. Information about the user will be returned.
   * @param {LoginRequestRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public async apiUsersLoginCreate(
    body: LoginRequestRequest,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<UserResponse>> {
    return UsersApiFp(this.configuration)
      .apiUsersLoginCreate(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Log out the user
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public async apiUsersLogoutCreate(
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<void>> {
    return UsersApiFp(this.configuration)
      .apiUsersLogoutCreate(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Register a new user. The new user will be logged in, and information about them returned.
   * @param {RegisterRequestRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public async apiUsersRegisterCreate(
    body: RegisterRequestRequest,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<UserResponse>> {
    return UsersApiFp(this.configuration)
      .apiUsersRegisterCreate(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Get information about the current user
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public async apiUsersWhoamiRetrieve(
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<UserResponse>> {
    return UsersApiFp(this.configuration)
      .apiUsersWhoamiRetrieve(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
